cmake_minimum_required(VERSION 2.8)
project(SDLPoP)

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -std=gnu99")

# have CMake output binaries to the directory that contains the source files
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${SDLPoP_SOURCE_DIR}/..")

if (WIN32)
    if (MSVC)
        # Don't let Visual Studio run CMake
        message(SEND_ERROR "To build using MSVC on Windows, you can use NMake or run build.bat.")
        return()
    endif()

    # Use the -mwindows compiler flag when compiling with MinGW to hide the console window
    # Only do this when not in debug mode
    if (NOT (CMAKE_BUILD_TYPE STREQUAL "Debug"))
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mwindows")
    endif (NOT (CMAKE_BUILD_TYPE STREQUAL "Debug"))

    # SDLPoP requires the SDL_2, SDL2_image and SDL2_mixer development libraries.
    # You can pass the SDL2 location to CMake like so: -DSDL2="C:/work/libraries/SDL2-2.0.6"
    # Or alternatively, specify the SDL2 location below:

    #set(SDL2 "C:/work/libraries/SDL2-2.0.6")

    # If the location of SDL2 is not specified, we will try to guess it.
    if (NOT(DEFINED SDL2))
        cmake_policy(SET CMP0015 NEW) # suppress warning about relative paths
        set(SDL2 "../../SDL2-2.0.6")
    endif()

    # Automatically detect whether we need the x86 or x64 version of the SDL2 library.
    if (CMAKE_SIZEOF_VOID_P EQUAL 8)
        set(SDL2_ARCH "x86_64-w64-mingw32")
    else()
        set(SDL2_ARCH "i686-w64-mingw32")
    endif()

    include_directories(${SDL2}/${SDL2_ARCH}/include)
    link_directories(${SDL2}/${SDL2_ARCH}/lib)
endif()

set(SOURCE_FILES
        main.c
        common.h
        config.h
        data.c
        data.h
        proto.h
        types.h
        seg000.c
        seg001.c
        seg002.c
        seg003.c
        seg004.c
        seg005.c
        seg006.c
        seg007.c
        seg008.c
        seg009.c
        seqtbl.c
        options.c
        replay.c
        lighting.c
        screenshot.c
        icon.rc
        )

if(WIN32)
    set(LIBS mingw32 SDL2main SDL2 SDL2.dll SDL2_image SDL2_mixer)
else()
    set(LIBS SDL2main SDL2 SDL2_image SDL2_mixer m dl)
endif()

# Target: prince executable
# =========================

add_executable(prince ${SOURCE_FILES})
target_link_libraries(prince ${LIBS})

# Target: mod executable or dll
# =============================

set(SHOULD_BUILD_MOD_AS_DLL 0) # set to 0 if you want to build a launchable mod.exe instead (useful for debugging)

# List any additional custom source files here:
set(MOD_SOURCE_FILES custom.c roomscript.c)

if (SHOULD_BUILD_MOD_AS_DLL)
    add_library(mod SHARED ${SOURCE_FILES} ${MOD_SOURCE_FILES})
    set_target_properties(mod PROPERTIES PREFIX "") # prevent the dll being named "libmod.dll"
else()
    add_executable(mod ${SOURCE_FILES} ${MOD_SOURCE_FILES}) # prevent the dll being named "libmod.dll"
    set_target_properties(mod PROPERTIES OUTPUT_NAME secrets) # Secrets of the Citadel: build secrets.exe
endif()

#target_compile_definitions(mod PUBLIC IS_SDLPOP_MOD_EXE SOTC_MOD) # make sure to #define SOTC_MOD in config.h though!

target_link_libraries(mod ${LIBS})
